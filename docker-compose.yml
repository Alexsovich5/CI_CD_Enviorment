version: '3.8'

services:
  # GitLab Community Edition
  gitlab:
    image: gitlab/gitlab-ce:latest
    container_name: gitlab-ce
    hostname: 'localhost'
    restart: unless-stopped
    ports:
      - '8090:8090' # Map host port 8090 to container port 8090
      - '8443:443'
      - '2222:22'
      - '5050:5050' # Container registry
    environment:
      GITLAB_OMNIBUS_CONFIG: |
        external_url 'http://192.168.1.187:8090' # Enable remote access
        gitlab_rails['gitlab_shell_ssh_port'] = 2222
        gitlab_rails['time_zone'] = 'America/New_York'
        gitlab_rails['backup_keep_time'] = 604800
        gitlab_rails['gitlab_email_enabled'] = false

        # Enable container registry
        registry_external_url 'http://localhost:5050'
        gitlab_rails['registry_enabled'] = true
        registry['enable'] = true

        # Performance tuning
        unicorn['worker_processes'] = 2
        sidekiq['max_concurrency'] = 10
        postgresql['shared_buffers'] = "128MB"
        postgresql['max_worker_processes'] = 4

        # Disable unused services
        prometheus_monitoring['enable'] = false
        alertmanager['enable'] = false
        grafana['enable'] = false
    volumes:
      - gitlab_config:/etc/gitlab
      - gitlab_logs:/var/log/gitlab
      - gitlab_data:/var/opt/gitlab
      - gitlab_backups:/var/opt/gitlab/backups
    privileged: true
    shm_size: '256m'
    healthcheck:
      test: [ "CMD", "/opt/gitlab/bin/gitlab-healthcheck", "--fail", "--max-time", "10" ]
      interval: 60s
      timeout: 30s
      retries: 5
      start_period: 180s
    networks:
      - devops_network

  # GitLab Runner for CI/CD
  gitlab-runner:
    image: gitlab/gitlab-runner:latest
    container_name: gitlab-runner
    restart: unless-stopped
    user: "${DOCKER_GID:-999}:${DOCKER_GID:-999}"
    volumes:
      - gitlab_runner_config:/etc/gitlab-runner
      - /var/run/docker.sock:/var/run/docker.sock:rw
    networks:
      - devops_network
    depends_on:
      - gitlab

  # PostgreSQL for SonarQube
  sonarqube_db:
    image: postgres:15-alpine
    container_name: sonarqube-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-sonar}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-sonar_default_pass}
      POSTGRES_DB: ${POSTGRES_DB:-sonarqube}
    volumes:
      - postgresql_data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U sonar -d sonarqube" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - devops_network

  # SonarQube Community Edition  
  sonarqube:
    image: sonarqube:lts-community
    container_name: sonarqube-ce
    restart: unless-stopped
    ports:
      - '9000:9000'
    environment:
      SONAR_JDBC_URL: jdbc:postgresql://sonarqube_db:5432/${POSTGRES_DB:-sonarqube}
      SONAR_JDBC_USERNAME: ${POSTGRES_USER:-sonar}
      SONAR_JDBC_PASSWORD: ${POSTGRES_PASSWORD:-sonar_default_pass}
      SONAR_ES_BOOTSTRAP_CHECKS_DISABLE: 'true'
      SONAR_SEARCH_JAVAADDITIONALOPTS: '-Dnode.store.allow_mmap=false -Xms256m -Xmx256m'
      # Disable Elasticsearch security for development
      SONAR_WEB_JAVAADDITIONALOPTS: '-Dsonar.es.bootstrap.checks.disable=true -Xms256m -Xmx512m'
    volumes:
      - sonarqube_data:/opt/sonarqube/data
      - sonarqube_extensions:/opt/sonarqube/extensions
      - sonarqube_logs:/opt/sonarqube/logs
      - sonarqube_conf:/opt/sonarqube/conf
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    mem_limit: 1g
    # Note: SonarQube needs to run as root due to embedded Elasticsearch requirements
    # This is a known limitation of the SonarQube Docker image
    depends_on:
      sonarqube_db:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9000/api/system/status" ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    networks:
      - devops_network

  # Nexus Repository Manager for artifact storage
  nexus:
    image: sonatype/nexus3:latest
    container_name: nexus-repository
    restart: unless-stopped
    ports:
      - '8081:8081'
    environment:
      NEXUS_SECURITY_RANDOMPASSWORD: false
    volumes:
      - nexus_data:/nexus-data
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8081/service/rest/v1/status" ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 120s
    networks:
      - devops_network

  # Jenkins for additional CI/CD flexibility
  jenkins:
    image: jenkins/jenkins:lts
    container_name: jenkins-master
    restart: unless-stopped
    ports:
      - '8084:8080' # Changed from 8082 to 8084 to avoid conflicts
      - '50000:50000'
    environment:
      JAVA_OPTS: '-Djenkins.install.runSetupWizard=false'
    volumes:
      - jenkins_home:/var/jenkins_home
      - /var/run/docker.sock:/var/run/docker.sock:rw
    user: "${JENKINS_USER:-1000}:${DOCKER_GID:-999}" # Jenkins user with docker group access
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8080/login" ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    networks:
      - devops_network

  # Grafana for monitoring and dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: grafana-monitoring
    restart: unless-stopped
    ports:
      - '3000:3000'
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD:-admin123}
      GF_INSTALL_PLUGINS: grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - grafana_config:/etc/grafana
    networks:
      - devops_network

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus-metrics
    restart: unless-stopped
    ports:
      - '9091:9090'  # Changed from 9090 to avoid port conflict
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - prometheus_data:/prometheus
      - ./config/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - devops_network

  # Redis for caching and session storage
  redis:
    image: redis:7-alpine
    container_name: redis-cache
    restart: unless-stopped
    ports:
      - '6379:6379'
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - devops_network

  # MinIO for S3-compatible object storage
  minio:
    image: minio/minio:latest
    container_name: minio-storage
    restart: unless-stopped
    ports:
      - '9001:9000' # API
      - '9002:9001' # Console
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-minioadmin123}
    command: server /data --console-address ":9001"
    volumes:
      - minio_data:/data
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - devops_network

  # Portainer for Docker management
  portainer:
    image: portainer/portainer-ce:latest
    container_name: portainer-docker-mgmt
    restart: unless-stopped
    ports:
      - '9443:9443'
    command: -H unix:///var/run/docker.sock
    privileged: true
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:rw
      - portainer_data:/data
    networks:
      - devops_network

  # Vault for secrets management
  vault:
    image: hashicorp/vault:latest
    container_name: vault-secrets
    restart: unless-stopped
    ports:
      - '8200:8200'
    environment:
      VAULT_ADDR: http://0.0.0.0:8200
    cap_add:
      - IPC_LOCK
    volumes:
      - vault_data:/vault/data
      - ./config/vault/vault.hcl:/vault/config/vault.hcl:ro
    command: vault server -config=/vault/config/vault.hcl
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8200/v1/sys/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    networks:
      - devops_network

  # Traefik reverse proxy for service discovery
  traefik:
    image: traefik:v3.0
    container_name: traefik-proxy
    restart: unless-stopped
    ports:
      - '80:80'
      - '8083:8080' # Traefik dashboard
    command:
      - --api.insecure=true
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --entrypoints.web.address=:80
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:rw
      - traefik_data:/data
    networks:
      - devops_network

  # OWASP ZAP for security testing
  zap:
    image: zaproxy/zap-stable:latest
    container_name: owasp-zap
    restart: unless-stopped
    ports:
      - '8093:8080'  # Changed from 8092 to avoid port conflict
    command: zap-webswing.sh
    volumes:
      - zap_data:/zap/wrk
    networks:
      - devops_network
    profiles:
      - security # Only start when security profile is active

  # Homer Dashboard for service navigation
  homer:
    image: b4bz/homer:latest
    container_name: homer-dashboard
    restart: unless-stopped
    environment:
      - INIT_ASSETS=1
    volumes:
      - homer_data:/www/assets
      - ./config/homer:/www/assets:ro
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.homer.rule=PathPrefix(`/`)"
      - "traefik.http.routers.homer.priority=100"
      - "traefik.http.routers.homer.entrypoints=web"
      - "traefik.http.services.homer.loadbalancer.server.port=8080"
    networks:
      - devops_network

  # SonarQube Quality Gate webhook receiver
  webhook-receiver:
    image: adnanh/webhook:latest
    container_name: webhook-receiver
    restart: unless-stopped
    ports:
      - '9900:9000'
    volumes:
      - ./webhooks/hooks.json:/etc/webhook/hooks.json:ro
    command: [ "-verbose", "-hooks=/etc/webhook/hooks.json", "-hotreload" ]
    networks:
      - devops_network
    profiles:
      - webhooks

  # Database backup service
  backup:
    image: postgres:15-alpine
    container_name: db-backup-service
    restart: unless-stopped
    environment:
      PGPASSWORD: ${POSTGRES_PASSWORD:-sonar_default_pass}
    volumes:
      - backup_data:/backups
      - ./scripts/backup.sh:/backup-script.sh:ro
    command: /bin/sh -c "while true; do sleep 86400; done" # Keep alive
    healthcheck:
      test: ["CMD", "pg_isready", "-h", "sonarqube_db", "-U", "sonar"]
      interval: 60s
      timeout: 10s
      retries: 3
    networks:
      - devops_network
    profiles:
      - backup

# Named volumes for persistent storage
volumes:
  # GitLab volumes
  gitlab_config:
  gitlab_logs:
  gitlab_data:
  gitlab_backups:
  gitlab_runner_config:

  # SonarQube volumes
  sonarqube_data:
  sonarqube_extensions:
  sonarqube_logs:
  sonarqube_conf:
  postgresql_data:

  # Additional service volumes
  nexus_data:
  jenkins_home:
  grafana_data:
  grafana_config:
  prometheus_data:
  redis_data:
  minio_data:
  portainer_data:
  vault_data:
  traefik_data:
  zap_data:
  homer_data:
  backup_data:

# Networks
networks:
  devops_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.25.0.0/16
